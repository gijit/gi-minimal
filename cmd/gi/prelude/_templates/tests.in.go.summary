
=========== flow1.go  ============

package main

import "fmt"

// defers access and modify named return values.

func main() {
	a := 7
	b := 0
	f := func() (ret0, ret1 int) {

		defer func(a int) {
			fmt.Printf("first defer, a = %v, ret0=%v, ret1 = %v\n", a, ret0, ret1)
			ret0 = (ret0+1)*3 + a
			ret1 = ret1 + 1 + a
		}(a)

		defer func() {
			ret0 = ret0 + 100
			ret1 = ret1 + 100
		}()

		a = 1
		b = 1

		return b, a + 58
	}
	f1, f2 := f()
	fmt.Printf("f1 = %v, f2 = %v\n", f1, f2)
	/*
	first defer, a = 7, ret0=101, ret1 = 159
	f1 = 313, f2 = 167
	*/

}

=========== flow2.go  ============

package main

import "fmt"

// a defer can recover a panic value, and re-panic with
// a new value that the next defer in line receives.

func main() {
	a := 0
	b := 0
	f := func() (ret0, ret1 int) {

		defer func(a int) {
			fmt.Printf("first defer running, a=%v, b=%v, ret0=%v, ret1=%v\n", a, b, ret0, ret1)
			b = b + 3
			ret0 = (ret0 + 1) * 3
			ret1 = ret1 + 1
			recov := recover()
			fmt.Printf("defer 1 recovered '%v'\n", recov)
			switch r := recov.(type) {
			case int:
				ret1 = ret1 + 9 + r*199
				ret0 = ret0 + 19 + r*3
			}
		}(a)

		defer func() {
			fmt.Printf("second defer running, a=%v, b=%v, ret1=%v\n", a, b, ret1)
			b = b * 7
			ret0 = ret0 + 100

			recov := recover()
			fmt.Printf("defer 2 recovered '%v'\n", recov)
			switch r := recov.(type) {
			case int:
				panic(r + 17)
			}
			ret1 = ret1 + 100
			fmt.Printf("second defer just updated ret1 to %v\n", ret1)

		}()

		a = 1
		b = 1

		panic(a + b)

		return b, 58
	}
	f1, f2 := f()
	fmt.Printf("f1 = %v, f2 = %v\n", f1, f2)
	/*
		go run flow2.go
		second defer running, a=1, b=1, ret1=0
		defer 2 recovered '2'
		first defer running, a=0, b=7, ret0=100, ret1=0
		defer 1 recovered '19'
		f1 = 379, f2 = 3791
	*/
}

=========== flow3.go  ============

package main

import "fmt"

// one defer throws a different panic, a later
//  defer recovers completely.

func main() {
	a := 0
	b := 0
	f := func() (ret0, ret1 int) {

		defer func(a int) {
			fmt.Printf("first defer running, a=%v, b=%v\n", a, b)
			b = b + 3
			ret0 = (ret0 + 1) * 3
			ret1 = ret1 + 1
			recov := recover()
			fmt.Printf("defer 1 recovered '%v'\n", recov)
		}(a)

		defer func() {
			fmt.Printf("second defer running, a=%v, b=%v\n", a, b)
			b = b * 7
			ret0 = ret0 + 100
			ret1 = ret1 + 100
			recov := recover()
			fmt.Printf("second defer, recov is %v\n", recov)
			panic("panic-in-defer-2")
		}()

		a = 1
		b = 1

		panic("ouch")

		return b, 58
	}
	f1, f2 := f()
	fmt.Printf("f1 = %v, f2 = %v\n", f1, f2)
	/*
		go run flow3.go
		second defer running, a=1, b=1
		second defer, recov is ouch
		first defer running, a=0, b=7
		defer 1 recovered 'panic-in-defer-2'
		f1 = 303, f2 = 101

	*/
}

=========== flow4.go  ============

package main

import "fmt"

func main() {
	a := 0
	b := 0
	f := func() (ret0, ret1 int) {

		defer func(a int) {
			fmt.Printf("first defer running, a=%v, b=%v, ret0=%v, ret1=%v\n", a, b, ret0, ret1)
			b = b + 3
			ret0 = (ret0 + 1) * 3
			ret1 = ret1 + 1
			recov := recover()
			fmt.Printf("defer 1 recovered '%v'\n", recov)
		}(a)

		defer func() {
			fmt.Printf("second defer running, a=%v, b=%v, ret1=%v\n", a, b, ret1)
			b = b * 7
			ret0 = ret0 + 100
			ret1 = ret1 + 100
			fmt.Printf("second defer just updated ret1 to %v\n", ret1)
			recov := recover()
			fmt.Printf("second defer, recov is %v\n", recov)
			panic("panic-in-defer-2")
		}()

		a = 1
		b = 1

		// panic("ouch")

		return b, 58
	}
	f1, f2 := f()
	fmt.Printf("f1 = %v, f2 = %v\n", f1, f2)
	/*
	go run flow4.go
	second defer running, a=1, b=1, ret1=58
	second defer just updated ret1 to 158
	second defer, recov is <nil>
	first defer running, a=0, b=7, ret0=101, ret1=158
	defer 1 recovered 'panic-in-defer-2'
	f1 = 306, f2 = 159

	*/
}

=========== flow5.go  ============

package main

import "fmt"

func main() {
	a := 0
	b := 0
	f := func() (ret0, ret1 int) {

		defer func(a int) {
			fmt.Printf("first defer running, a=%v, b=%v, ret0=%v, ret1=%v\n", a, b, ret0, ret1)
			b = b + 3
			ret0 = (ret0 + 1) * 3
			ret1 = ret1 + 1
			recov := recover()
			fmt.Printf("defer 1 recovered '%v'\n", recov)
		}(a)

		panic("in-between-defers-panic")

		defer func() {
			fmt.Printf("second defer running, a=%v, b=%v, ret1=%v\n", a, b, ret1)
			b = b * 7
			ret0 = ret0 + 100
			ret1 = ret1 + 100
			fmt.Printf("second defer just updated ret1 to %v\n", ret1)
			recov := recover()
			fmt.Printf("second defer, recov is %v\n", recov)
			panic("panic-in-defer-2")
		}()

		a = 1
		b = 1

		return b, 58
	}
	f1, f2 := f()
	fmt.Printf("f1 = %v, f2 = %v\n", f1, f2)
	/*
	go run flow5.go
	first defer running, a=0, b=0, ret0=0, ret1=0
	defer 1 recovered 'in-between-defers-panic'
	f1 = 3, f2 = 1

	*/
}

=========== flow6.go  ============

package main

import "fmt"

func main() {
	a := 0
	b := 0
	f := func() (ret0, ret1 int) {

		defer func(a int) {
			fmt.Printf("first defer running, a=%v, b=%v, ret0=%v, ret1=%v\n", a, b, ret0, ret1)
			b = b + 3
			ret0 = (ret0 + 1) * 3
			ret1 = ret1 + 1
			recov := recover()
			fmt.Printf("defer 1 recovered '%v'\n", recov)
			if recov != nil {
				ret1 = ret1 + 9
				ret0 = ret0 + 19
			}
		}(a)

		defer func() {
			fmt.Printf("second defer running, a=%v, b=%v, ret1=%v\n", a, b, ret1)
			b = b * 7
			ret0 = ret0 + 100
			ret1 = ret1 + 100
			fmt.Printf("second defer just updated ret1 to %v\n", ret1)
			//recov := recover()
			//fmt.Printf("second defer, recov is %v\n", recov)
			//panic("panic-in-defer-2")
		}()

		a = 1
		b = 1

		panic("ouch")

		return b, 58
	}
	f1, f2 := f()
	fmt.Printf("f1 = %v, f2 = %v\n", f1, f2)
	/*
	go run flow6.go
	second defer running, a=1, b=1, ret1=0
	second defer just updated ret1 to 100
	first defer running, a=0, b=7, ret0=100, ret1=100
	defer 1 recovered 'ouch'
	f1 = 322, f2 = 110
	*/
}

=========== flow7.go  ============

package main

import "fmt"

// nested calls: can panic transfer
// from lower in the stack to higher up?

var global int = 0

func deeper(a int) {
	global += (a + 3)
	panic("panic-in-deeper")
}

func main() {
	a := 0
	b := 0

	f := func() (ret0, ret1 int) {

		defer func(a int) {
			fmt.Printf("first defer running, a=%v, b=%v, ret0=%v, ret1=%v\n", a, b, ret0, ret1)
			b = b + 3
			ret0 = (ret0+1)*3 + global
			ret1 = ret1 + 1
			recov := recover()
			fmt.Printf("defer 1 recovered '%v'\n", recov)
			if recov != nil {
				ret1 = ret1 + 9 + global
				ret0 = ret0 + 19 + global
			}
		}(a)

		deeper(a)
		return
	}
	f1, f2 := f()
	fmt.Printf("f1 = %v, f2 = %v\n", f1, f2)
	/*

	go run flow7.go
	first defer running, a=0, b=0, ret0=0, ret1=0
	defer 1 recovered 'panic-in-deeper'
	f1 = 28, f2 = 13

	*/
}

=========== flow8.go  ============

package main

import "fmt"

// nested calls: can panic transfer
// from lower in the stack to higher up?

var global int = 0

func deeper(a int) {
	global += (a + 3)
	panic("panic-in-deeper")
}

func intermed(a int) {
	deeper(a)
}

func main() {
	a := 0
	b := 0

	f := func() (ret0, ret1 int) {

		defer func(a int) {
			fmt.Printf("first defer running, a=%v, b=%v, ret0=%v, ret1=%v\n", a, b, ret0, ret1)
			b = b + 3
			ret0 = (ret0+1)*3 + global
			ret1 = ret1 + 1
			recov := recover()
			fmt.Printf("defer 1 recovered '%v'\n", recov)
			if recov != nil {
				ret1 = ret1 + 9 + global
				ret0 = ret0 + 19 + global
			}
		}(a)

		intermed(a)
		return
	}
	f1, f2 := f()
	fmt.Printf("f1 = %v, f2 = %v\n", f1, f2)
	/*
		go run flow8.go
		first defer running, a=0, b=0, ret0=0, ret1=0
		defer 1 recovered 'panic-in-deeper'
		f1 = 28, f2 = 13
	*/
}
