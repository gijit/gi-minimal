
__go_import "math/rand"
__go_import "fmt"
__go_import "time"


__type__anon_sliceType = __sliceType(__type__float64); -- 'IMMEDIATE' anon type printing. utils.go:506

__type__Matrix = __newType(0, __kindStruct, "main.Matrix", true, "main", true, nil);

__type__anon_ptrType = __ptrType(__type__Matrix);

__type__anon_sliceType_1 = __sliceType(__type__anon_sliceType); -- 'DELAYED' anon type printing. utils.go:506

__type__Matrix.__methods_desc = {{prop= "Set", __name= "Set", __pkg="", __typ= __funcType({__type__int, __type__int, __type__float64}, {}, false)}, {prop= "Get", __name= "Get", __pkg="", __typ= __funcType({__type__int, __type__int}, {__type__float64}, false)}}; -- incr.go:817 for methods

__type__Matrix.ptr.__methods_desc = {{prop= "Set", __name= "Set", __pkg="", __typ= __funcType({__type__int, __type__int, __type__float64}, {}, false)}, {prop= "Get", __name= "Get", __pkg="", __typ= __funcType({__type__int, __type__int}, {__type__float64}, false)}}; -- incr.go:827 for ptr_methods

__type__Matrix.init("", {{__prop= "A", __name= "A", __anonymous= false, __exported= true, __typ= __type__anon_sliceType_1, __tag= ""}, {__prop= "Nrow", __name= "Nrow", __anonymous= false, __exported= true, __typ= __type__int, __tag= ""}, {__prop= "Ncol", __name= "Ncol", __anonymous= false, __exported= true, __typ= __type__int, __tag= ""}}); -- incr.go:873

__type__Matrix.__constructor = function(self, ...) 
   if self == nil then self = {}; end
   local A_, Nrow_, Ncol_ = ... ;
   self.A = A_ or __type__anon_sliceType_1.__nil;
   self.Nrow = Nrow_ or 0LL;
   self.Ncol = Ncol_ or 0LL;
   return self; 
end;
;

NewMatrix = function(nrow, ncol, fill)
   print("NewMatrix, ncol = ",ncol)
   m = __type__Matrix.ptr({}, __makeSlice(__type__anon_sliceType_1, nrow), nrow, ncol);
   do  local i = 0; 
      local __gensym_2_i = 0; local __gensym_1__lim = __lenz(m.A);
      while __gensym_2_i < __gensym_1__lim do
         
         i = __gensym_2_i;

         __gi_SetRangeCheck(m.A, i, __makeSlice(__type__anon_sliceType, ncol));
         
         __gensym_2_i=__gensym_2_i+1;

   end end;

   print("after making matrix, m.A is = "..tostring(m.A))
   
   if (fill) then 
      do  local i = 0; 
         local __gensym_5_i = 0; local __gensym_4__lim = __lenz(m.A);
         while __gensym_5_i < __gensym_4__lim do
            
            i = __gensym_5_i;

			do  local j = 0; 
               local __gensym_8_i = 0; local __gensym_7__lim = __lenz(__gi_GetRangeCheck(m.A, i));
               while __gensym_8_i < __gensym_7__lim do
                  
                  j = __gensym_8_i;

                  __gi_SetRangeCheck(__gi_GetRangeCheck(m.A, i), j, (tonumber(rand.Intn(100LL))) / (tonumber((2LL + rand.Intn(100LL)))));
                  
                  __gensym_8_i=__gensym_8_i+1;

            end end;
            
			
            __gensym_5_i=__gensym_5_i+1;

      end end;
      
   end 
   return  m ;
end;
__pkg.NewMatrix = NewMatrix;
mult = function(m1, m2) 
   local r = __type__anon_ptrType.__nil;
   if ( not ((m1.Ncol == m2.Nrow))) then 
      panic(fmt.Sprintf("incompatible: m1.Ncol=%v, m2.Nrow=%v", m1.Ncol, m2.Nrow));
   end 
   r = NewMatrix(m1.Nrow, m2.Ncol, false);
   nr1 = m1.Nrow;
   nr2 = m2.Nrow;
   nc2 = m2.Ncol;
   local i = 0LL;
   while (true) do
      if (not (i < nr1)) then break; end
      local k = 0LL;
      while (true) do
         if (not (k < nr2)) then break; end
         local j = 0LL;
         while (true) do
            if (not (j < nc2)) then break; end
            a = r:Get(i, j);
            a = a + (m1:Get(i, k) * m2:Get(k, j));
            r:Set(i, j, a);
            j = j + (1LL);
         end 
         k = k + (1LL);
      end 
      i = i + (1LL);
   end 
   return  r ;
end;
__type__Matrix.ptr.prototype.Set = function(m,i, j, val) 
   __gi_SetRangeCheck(__gi_GetRangeCheck(m.A, i), j, val);
end;
__type__Matrix.prototype.Set = function(this , i, j, val)  return this.__val.Set(i, j, val); end;

__type__Matrix.__addToMethods({prop= "Set", __name= "Set", __pkg="", __typ= __funcType({__type__int, __type__int, __type__float64}, {}, false)}); -- package.go:344

__type__Matrix.ptr.__addToMethods({prop= "Set", __name= "Set", __pkg="", __typ= __funcType({__type__int, __type__int, __type__float64}, {}, false)}); -- package.go:346
__type__Matrix.ptr.prototype.Get = function(m,i, j)
   print("Get called!  i =",i,"  and j =", j)
   print("Get sees m = "..tostring(m))
   print("done with tostring on m")
   print("Get sees m.A = "..tostring(m.A))
   return  __gi_GetRangeCheck(__gi_GetRangeCheck(m.A, i), j) ;
end;
__type__Matrix.prototype.Get = function(this , i, j)  return this.__val.Get(i, j); end;

__type__Matrix.__addToMethods({prop= "Get", __name= "Get", __pkg="", __typ= __funcType({__type__int, __type__int}, {__type__float64}, false)}); -- package.go:344

__type__Matrix.ptr.__addToMethods({prop= "Get", __name= "Get", __pkg="", __typ= __funcType({__type__int, __type__int}, {__type__float64}, false)}); -- package.go:346
MatScaMul = function(m, x) 
   local r = __type__anon_ptrType.__nil;
   r = NewMatrix(m.Nrow, m.Ncol, false);
   local i = 0LL;
   while (true) do
      if (not (i < m.Nrow)) then break; end
      local j = 0LL;
      while (true) do
         if (not (j < m.Ncol)) then break; end
         r:Set(i, j, x * m:Get(i, j));
         j = j + (1LL);
      end 
      i = i + (1LL);
   end 
   return  r ;
end;
__pkg.MatScaMul = MatScaMul;
main = function() 
   local sz = 3LL;
   local i = 0LL;
   while (true) do
      if (not (i < 1LL)) then break; end
      a = NewMatrix(sz, sz, true);
      b = NewMatrix(sz, sz, true);
      mult(a, b);
      i = i + (1LL);
   end 
end;

sz=3

--a = NewMatrix(sz, sz, true);
